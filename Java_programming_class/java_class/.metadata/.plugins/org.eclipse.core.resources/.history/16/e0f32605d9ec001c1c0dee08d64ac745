package finalterm.linkedList;

interface LinkedListService {
	
	// Appends the specified element to the end of this list.
	void addFirst(int value);
	
	void addlast(int value);
	
	boolean deleteFirst();
	
	boolean deleteLast();
	
	boolean insert(int value, int pos);
	
	public int find(int n);
	
	int size();
	
	int getNode(int pos);
	
	void display();
	
	boolean isEmpty();
}

public class DoublyLinkedList implements LinkedListService {
	
	Node header;
	
	public DoublyLinkedList() {
		// TODO Auto-generated constructor stub
		header = new Node(null, -1, null);
	}
	
	public class Node {
		Node prev;
		int value;
		Node next;
		
		Node(Node prev, int value, Node next) {
			this.next = next;
			this.value = value;
			this.prev = prev;
		}
		
	}

	@Override
	public void addFirst(int value) {
		// TODO Auto-generated method stub
		Node n = new Node(header, value, null);
		if(header.next!= null) {
			header.next.prev = n;
			n.next = header.next;
		}
		header.next = n;
	}

	@Override
	public void addlast(int value) {
		// TODO Auto-generated method stub
		Node last = new Node(header,value, null);
		if(header.next == null) {
			header.next = last;
			last.prev = header;
		} else {
			Node temp = header.next;
			while(temp.next != null) {
				temp = temp.next;
			}
			last.prev = temp;
			last.next = null;
			temp.next = last;
		}
	}

	@Override
	public boolean insert(int value, int pos) {
		// TODO Auto-generated method stub
		if(pos >= size() && pos < 0) {
			throw new IndexOutOfBoundsException("Pos not found in the Linked List");
		}
		Node next = header;
		Node prev = null;
		for(int i = 0; i <= pos; ++i){
			if(i==pos){
				prev = next;
			}
			next = next.next;
		}
		Node insertNode = new Node(prev,value,next);
		if(next != null){
			next.prev = insertNode;
		}
		prev.next =insertNode;
		return true;
	}

	@Override
	public int find(int n) {
		// TODO Auto-generated method stub
		Node node = header;
		while(node.next!=null) {
			if(node.value == n) {
				return n;
			}
			node = node.next;
		}
		return -1;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		int count=0;
		Node n = header;
		while(n.next != null) {
			count++;
			n= n.next;
		}
		return count;
	}

	@Override
	public int getNode(int pos) {
		// TODO Auto-generated method stub
		if (pos >= size() && pos < 0) {
			throw new IndexOutOfBoundsException("Pos Greater than size");
		}
		Node node = header;
		for(int i =0;i<=pos;i++) {
			node = node.next;
		}
		if(node != null) {
			return node.value;
		}
		return -1;
	}
	
	@Override
	public void display() {
		
		Node next = header.next;
		while(next.next != null){
			System.out.print(next.value + "-->");
			next = next.next;
		}
		System.out.println(next.value);
		
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		if(header.next == null) {
			return true;
		}
		return false;
	}

	@Override
	public boolean deleteFirst() {
		// TODO Auto-generated method stub
		Node temp = header;
		if(header.next!= null) {
			temp = header.next;
			header.next = temp.next;
			temp.next.prev = header;
			return true;
		}
		return false;
	}

	@Override
	public boolean deleteLast() {
		// TODO Auto-generated method stub
		Node node = header;
		Node temp = null;
		while (node.next != null) {
			node = node.next;
			if(node.next == null) {
				temp = node;
			}
		}
		if(temp != null) {
			temp.prev.next = null;
			return true;
		}
		return false;
	}

	@Override
	public String toString() {
		return "DoublyLinkedList [header=" + header.value + "]";
	}

	public static void main(String[] args) {
		DoublyLinkedList ob = new DoublyLinkedList();
		System.out.println("Is Empty : "+ob.isEmpty());
		ob.addFirst(100);
		ob.addFirst(30);
		System.out.println("Size : "+ob.size());
		ob.display();
		ob.addlast(20);
		ob.display();
		System.out.println("Delete First : "+ob.deleteFirst());
		System.out.println("Size : "+ob.size());
		ob.addlast(200);
		ob.display();
		System.out.println("Delete last : "+ob.deleteLast());
		ob.display();
		System.out.println("Find : "+ob.find(100));
		System.out.println("Get Node : "+ob.getNode(0));
		ob.display();
		System.out.println("Insert in Position : "+ob.insert(4, 1));
		ob.addlast(340);
		ob.display();
	}

	
	
}
