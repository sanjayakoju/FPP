package finalterm.linkedList;

interface Queue1 {
	
	void enqueue(int n);
	
	int deQueue();
	
	boolean isFull();
	
	boolean isEmpty();
	
	public int size();
}

public class QueueDLinkedList implements Queue1 {
	
	Node front, rear;
	int count;
	
	class Node {
		Node prev;
		int value;
		Node next;
		public Node(Node prev, int value, Node next) {
			this.prev = prev;
			this.value = value;
			this.next = next;
		}
	}
	
	public QueueDLinkedList() {
		this.count = 0;
	}

	@Override
	public void enqueue(int n) {
		// TODO Auto-generated method stub
		Node node = new Node(null, n, null);
		if (front == null) {
			front = node;
			rear = node;
		}
		if(front == rear) {
			front.next = node;
			rear.prev = front;
		} else {
			rear.next = node;
			node.prev = rear;
		}
		count++;
	}

	@Override
	public int deQueue() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isFull() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		if (count == 0) {
			return true;
		}
		return false;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return count;
	}
	
	public static void main(String[] args) {
		QueueDLinkedList ob = new QueueDLinkedList();
		ob.enqueue(10);
		ob.enqueue(20);
		System.out.println("Size : "+ob.size());
	}

}
